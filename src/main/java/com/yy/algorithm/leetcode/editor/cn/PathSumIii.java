//ÁªôÂÆö‰∏Ä‰∏™‰∫åÂèâÊ†ëÔºåÂÆÉÁöÑÊØè‰∏™ÁªìÁÇπÈÉΩÂ≠òÊîæÁùÄ‰∏Ä‰∏™Êï¥Êï∞ÂÄº„ÄÇ 
//
// ÊâæÂá∫Ë∑ØÂæÑÂíåÁ≠â‰∫éÁªôÂÆöÊï∞ÂÄºÁöÑË∑ØÂæÑÊÄªÊï∞„ÄÇ 
//
// Ë∑ØÂæÑ‰∏çÈúÄË¶Å‰ªéÊ†πËäÇÁÇπÂºÄÂßãÔºå‰πü‰∏çÈúÄË¶ÅÂú®Âè∂Â≠êËäÇÁÇπÁªìÊùüÔºå‰ΩÜÊòØË∑ØÂæÑÊñπÂêëÂøÖÈ°ªÊòØÂêë‰∏ãÁöÑÔºàÂè™ËÉΩ‰ªéÁà∂ËäÇÁÇπÂà∞Â≠êËäÇÁÇπÔºâ„ÄÇ 
//
// ‰∫åÂèâÊ†ë‰∏çË∂ÖËøá1000‰∏™ËäÇÁÇπÔºå‰∏îËäÇÁÇπÊï∞ÂÄºËåÉÂõ¥ÊòØ [-1000000,1000000] ÁöÑÊï¥Êï∞„ÄÇ 
//
// Á§∫‰æãÔºö 
//
// root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
//
//      10
//     /  \
//    5   -3
//   / \    \
//  3   2   11
// / \   \
//3  -2   1
//
//ËøîÂõû 3„ÄÇÂíåÁ≠â‰∫é 8 ÁöÑË∑ØÂæÑÊúâ:
//
//1.  5 -> 3
//2.  5 -> 2 -> 1
//3.  -3 -> 11
// 
// Related Topics Ê†ë Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ‰∫åÂèâÊ†ë 
// üëç 902 üëé 0

//frontendQuestionId:437

package com.yy.algorithm.leetcode.editor.cn;

import java.util.HashMap;
import java.util.Map;

public class PathSumIii {
    public static void main(String[] args) {
        Solution solution = new PathSumIii().new Solution();
        TreeNode root = new TreeNode(10, new TreeNode(5, new TreeNode(3, new TreeNode(3), new TreeNode(-2)), new TreeNode(2, null, new TreeNode(1))),
                new TreeNode(-3, null, new TreeNode(11)));
        System.out.println(solution.pathSum(root, 8));
    }

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode() {
        }

        TreeNode(int val) {
            this.val = val;
        }

        TreeNode(int val, TreeNode left, TreeNode right) {
            this.val = val;
            this.left = left;
            this.right = right;
        }
    }
    //leetcode submit region begin(Prohibit modification and deletion)

    /**
     * Definition for a binary tree node.
     * public class TreeNode {
     * int val;
     * TreeNode left;
     * TreeNode right;
     * TreeNode() {}
     * TreeNode(int val) { this.val = val; }
     * TreeNode(int val, TreeNode left, TreeNode right) {
     * this.val = val;
     * this.left = left;
     * this.right = right;
     * }
     * }
     */
    class Solution {
        public int pathSum(TreeNode root, int targetSum) {
            Map<Integer, Integer> map = new HashMap<>();
            map.put(0, 1);
            return dfs(root, targetSum, 0, map);
        }


        private int dfs(TreeNode root, int targetSum, int current, Map<Integer, Integer> map) {
            int res = 0;
            if (root == null) {
                return res;
            }
            current += root.val;
            if (map.get(current - targetSum) != null) {
                res += map.get(current - targetSum);
            }
            map.put(current, map.getOrDefault(current, 0) + 1);
            int left = dfs(root.left, targetSum, current, map);
            int right = dfs(root.right, targetSum, current, map);
            map.put(current, map.getOrDefault(current, 0) - 1);
            return res + left + right;
        }
    }
//leetcode submit region end(Prohibit modification and deletion)

}